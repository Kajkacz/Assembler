#include <stdio.h> 		// angle brackets include looks for file 'stdio.h' 
#include <string.h>		//	in all the possible directories (including 
#include <stdlib.h>		//	this file directory or system directories)

#include "x86_function.h" 	// quotation include looks for 'x86_function.h' ONLY in the  
				//	working directory and relative 
				//	directories (for example "../another_file.h")

#define MAX_IMAGE 1220
#define FILENAME "/home/kajkacz/Dropbox/Studia/ARKO/ARKO Projekt/intel/IntelArko/Projekt/Test.bmp"

int main(int argc, char *argv[])
{
	if (argc < 1)				// check if text is provided CHANGE
	{
		printf("Not enough arguments.\n"
			"Run program as \"%s <some alphanumeric text>\"\n"
			"Thanks ;-)", argv[0]);
		return -1;
	}
	

	unsigned char fileHeader[54];
	int* bmpFile;
	FILE* filePtr = fopen(FILENAME,"rb");

	if(filePtr == NULL)
		{
			printf("Error Opening File");
			return;
		}
	
	fread(fileHeader,sizeof(unsigned char), 54, filePtr); //Read the header into header array
	
		///READ DATA FROM FILE HEADER
	int width = *(int*)&fileHeader[18];
	int height = *(int*)&fileHeader[22];
	int padding = 0 ;
	while((width*3+padding)%4!=0)
		padding++;
	int newWidth = width*3 + padding;
	printf("\nFileHeader Data:\n	width = %i\n	height = %i\n	padding = %i\n	newWidth = %i\n",width,height,padding,newWidth);

		///READ BMP HEADER
	unsigned char *pixels = (unsigned char*)malloc(width*height*3*sizeof(unsigned char));
	unsigned char *rowOfData = (unsigned char*)malloc(widthnew * sizeof(unsigned int));
		
	if(pixels == NULL || rowOfData == NULL)
	{
	printf("Malloc Error :( \n");
	return;
	}
	int i = 0;
	for(i=0; i<height;i++)
	{
		
	}




//	imageTransformed = malloc(strlen(argv[1]) + 1);	// alloc mamory for copy of our text
//	if (imageTransformed == NULL)
//	{
//		printf("Memory allocation failed.");
//		return -1;
//	}
	
//	strcpy(pText, argv[1]);			// copy text
	
//	x86_function(pText);			// call assembler procedure
	
	
	return 0;
}

